// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { createContext, useContext, useRef } from "react";
import { exists, combineRef, renderChildren, noop } from "./_internal_utils";
import { useFocus, mergeProps } from "@visly/core";
import { usePrimitive } from "./_internal_usePrimitive";
const Context = createContext(null);
export function Root(props) {
  const ref = useRef();
  const focusDelegateRef = useRef(null);
  const {
    style,
    testId,
    innerRef,
    values,
    vislyProps,
    isDisabled,
  } = usePrimitive({
    ref,
    props,
  });
  const delegateFocus = {
    onMouseDownCapture: () => {
      if (exists(focusDelegateRef)) {
        focusDelegateRef.current.focus();
      }
    },
  };

  const onChange = (e) => {
    if (exists(props.onChange)) {
      props.onChange(e.currentTarget.value);
    }
  };

  return (
    <label
      ref={combineRef(props.measureRef, combineRef(innerRef, ref))}
      data-testid={testId}
      {...mergeProps(vislyProps, delegateFocus)}
      onFocus={noop}
      onBlur={noop}
      style={style}
    >
      <Context.Provider
        value={{
          inputRef: combineRef(props.inputRef, focusDelegateRef),
          onFocus: vislyProps.onFocus,
          onBlur: vislyProps.onBlur,
          onChange,
          value: props.value,
          disabled: isDisabled,
        }}
      >
        {renderChildren(props.children, values)}
      </Context.Provider>
    </label>
  );
}
export function InputPrimitive(props) {
  const { onFocus, onBlur, onChange, inputRef, value, disabled } = useContext(
    Context
  );
  const { focusProps } = useFocus({
    onFocus,
    onBlur,
  });
  const placeholder = props.placeholder;
  return (
    <input
      type="text"
      {...focusProps}
      onChange={onChange}
      value={value}
      ref={combineRef(props.measureRef, inputRef)}
      placeholder={placeholder}
      disabled={disabled}
      className={props.className}
      style={{
        borderImage: "none",
        outline: "none",
        background: "none",
        ...(disabled
          ? {
              cursor: "not-allowed",
            }
          : {}),
      }}
    />
  );
}
