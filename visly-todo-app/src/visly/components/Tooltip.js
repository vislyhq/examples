// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import "../textstyles/fonts.css";
import "./reset.css";
import "./Tooltip.css";
import React, { createContext, useContext } from "react";
import {
  exists,
  findSetVariantProps,
  makeCompositeDefaultProps,
} from "./_internal_utils";
import { TextPrimitive } from "./_internal_primitives";
import { TooltipRoot } from "./_internal_tooltip";

const styles = [
  {
    type: "default",
    layers: {
      "tooltip-root": {
        none: {
          arrowColor: "rgba(80,80,80,1)",
        },
      },
      "tooltip-text": {
        none: {
          text: "Tooltip",
        },
      },
    },
  },
];

const defaultPropValues = [
  {
    type: "default",
    layers: {},
  },
];

const variantPropTypes = [];

export const TooltipContext = createContext(null);

function Tooltip(_props) {
  const defaults = useContext(TooltipContext);
  const props = { ...defaults, ..._props };
  const activeVariants = findSetVariantProps(variantPropTypes, props);
  const getCompositeDefaultProps = makeCompositeDefaultProps(
    defaultPropValues,
    activeVariants
  );
  return (
    <TooltipRoot
      {...props}
      key="tooltip-root"
      internal={{
        styles,
        layerId: "tooltip-root",
        scope: "CV7khtZtKf",
        activeVariants,
      }}
      internalChildren={(getStyle) => (
        <TextPrimitive
          className={"__visly_reset __visly_scope_CV7khtZtKf_tooltip-text"}
          key={"tooltip-text"}
          text={
            exists(props.text) ? props.text : getStyle("tooltip-text", "text")
          }
        />
      )}
    >
      {props.children}
    </TooltipRoot>
  );
}

Tooltip.__variants = [];

export default Tooltip;
