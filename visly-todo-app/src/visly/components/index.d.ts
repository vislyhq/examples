// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React from "react";
export interface CommonProps<T extends HTMLElement> {
  className?: string;
  style?: React.CSSProperties;
  innerRef?: React.MutableElementRef<T> | React.RefCallback<T>;
  tabIndex?: number;
  role?: string;
  testId?: string;
  disabled?: boolean;
  onAuxClick?: React.MouseEventHandler<T>;
  onAuxClickCapture?: React.MouseEventHandler<T>;
  onClick?: React.MouseEventHandler<T>;
  onClickCapture?: React.MouseEventHandler<T>;
  onContextMenu?: React.MouseEventHandler<T>;
  onContextMenuCapture?: React.MouseEventHandler<T>;
  onDoubleClick?: React.MouseEventHandler<T>;
  onDoubleClickCapture?: React.MouseEventHandler<T>;
  onDrag?: React.DragEventHandler<T>;
  onDragCapture?: React.DragEventHandler<T>;
  onDragEnd?: React.DragEventHandler<T>;
  onDragEndCapture?: React.DragEventHandler<T>;
  onDragEnter?: React.DragEventHandler<T>;
  onDragEnterCapture?: React.DragEventHandler<T>;
  onDragExit?: React.DragEventHandler<T>;
  onDragExitCapture?: React.DragEventHandler<T>;
  onDragLeave?: React.DragEventHandler<T>;
  onDragLeaveCapture?: React.DragEventHandler<T>;
  onDragOver?: React.DragEventHandler<T>;
  onDragOverCapture?: React.DragEventHandler<T>;
  onDragStart?: React.DragEventHandler<T>;
  onDragStartCapture?: React.DragEventHandler<T>;
  onDrop?: React.DragEventHandler<T>;
  onDropCapture?: React.DragEventHandler<T>;
  onMouseDown?: React.MouseEventHandler<T>;
  onMouseDownCapture?: React.MouseEventHandler<T>;
  onMouseEnter?: React.MouseEventHandler<T>;
  onMouseLeave?: React.MouseEventHandler<T>;
  onMouseMove?: React.MouseEventHandler<T>;
  onMouseMoveCapture?: React.MouseEventHandler<T>;
  onMouseOut?: React.MouseEventHandler<T>;
  onMouseOutCapture?: React.MouseEventHandler<T>;
  onMouseOver?: React.MouseEventHandler<T>;
  onMouseOverCapture?: React.MouseEventHandler<T>;
  onMouseUp?: React.MouseEventHandler<T>;
  onMouseUpCapture?: React.MouseEventHandler<T>;
  onTouchCancel?: React.TouchEventHandler<T>;
  onTouchCancelCapture?: React.TouchEventHandler<T>;
  onTouchEnd?: React.TouchEventHandler<T>;
  onTouchEndCapture?: React.TouchEventHandler<T>;
  onTouchMove?: React.TouchEventHandler<T>;
  onTouchMoveCapture?: React.TouchEventHandler<T>;
  onTouchStart?: React.TouchEventHandler<T>;
  onTouchStartCapture?: React.TouchEventHandler<T>;
  onPointerDown?: React.PointerEventHandler<T>;
  onPointerDownCapture?: React.PointerEventHandler<T>;
  onPointerMove?: React.PointerEventHandler<T>;
  onPointerMoveCapture?: React.PointerEventHandler<T>;
  onPointerUp?: React.PointerEventHandler<T>;
  onPointerUpCapture?: React.PointerEventHandler<T>;
  onPointerCancel?: React.PointerEventHandler<T>;
  onPointerCancelCapture?: React.PointerEventHandler<T>;
  onPointerEnter?: React.PointerEventHandler<T>;
  onPointerLeave?: React.PointerEventHandler<T>;
  onPointerOver?: React.PointerEventHandler<T>;
  onPointerOverCapture?: React.PointerEventHandler<T>;
  onPointerOut?: React.PointerEventHandler<T>;
  onPointerOutCapture?: React.PointerEventHandler<T>;
  onGotPointerCapture?: React.PointerEventHandler<T>;
  onGotPointerCaptureCapture?: React.PointerEventHandler<T>;
  onLostPointerCapture?: React.PointerEventHandler<T>;
  onLostPointerCaptureCapture?: React.PointerEventHandler<T>;
  onScroll?: React.UIEventHandler<T>;
  onScrollCapture?: React.UIEventHandler<T>;
  onWheel?: React.WheelEventHandler<T>;
  onWheelCapture?: React.WheelEventHandler<T>;
  onKeyDown?: React.KeyboardEventHandler<T>;
  onKeyDownCapture?: React.KeyboardEventHandler<T>;
  onKeyPress?: React.KeyboardEventHandler<T>;
  onKeyPressCapture?: React.KeyboardEventHandler<T>;
  onKeyUp?: React.KeyboardEventHandler<T>;
  onKeyUpCapture?: React.KeyboardEventHandler<T>;
  onFocus?: React.FocusEventHandler<T>;
  onFocusCapture?: React.FocusEventHandler<T>;
  onBlur?: React.FocusEventHandler<T>;
  onBlurCapture?: React.FocusEventHandler<T>;
}
export const Button: {
  (
    props: {
      text?: string;
      onPress?: (event: PressEvent) => void;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const Checkbox: {
  (
    props: {
      onChange?: (checked: boolean) => void;
      checked?: boolean;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const IconButton: {
  (
    props: {
      icon?: string;
      onPress?: (event: PressEvent) => void;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const Input: {
  (
    props: {
      placeholder?: string;
      value?: string;
      onChange?: (value: string) => void;
      inputRef?: React.Ref<HTMLInputElement>;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const List: {
  (
    props: {
      selected?: string | string[] | Set<string>;
      onSelect: (values: Set<string>) => void;
      selectionMode?: "none" | "single" | "multiple";
      children?: React.ReactNode[];
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  Item: {
    (
      props: {
        label?: string;
        value: string;
        selected?: boolean;
      } & CommonProps<HTMLDivElement>
    ): JSX.Element;
  };
};
export const Page: {
  (
    props: {
      children?: React.ReactNode | React.ReactNode[];
      title?: string;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const ProgressBar: {
  (
    props: {
      value?: number;
      color?: "red" | "yellow" | "green";
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
export const SegmentedControl: {
  (
    props: {
      selected?: string;
      onSelect: (value: string) => void;
      ariaLabel?: string;
      focused?: boolean;
      children?: React.ReactNode[];
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  Button: {
    (
      props: {
        text?: string;
        value?: string;
        selected?: boolean;
      } & CommonProps<HTMLDivElement>
    ): JSX.Element;
  };
};
export const Select: {
  (
    props: {
      label?: string;
      selected?: string;
      onSelect: (value: string) => void;
      noShadow?: boolean;
      customVariant?: boolean;
      children?: React.ReactNode[];
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  Option: {
    (
      props: {
        label?: string;
        value: string;
        selected?: boolean;
      } & CommonProps<HTMLDivElement>
    ): JSX.Element;
  };
};
export const ShadowTesting: {
  (props: {} & CommonProps<HTMLDivElement>): JSX.Element;
};
export const SubmitInput: {
  (
    props: {
      IconButton?: React.ReactNode;
      Input?: React.ReactNode;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  IconButton: typeof IconButton;
  Input: typeof Input;
};
export const Task: {
  (
    props: {
      date?: string;
      title?: string;
      done?: boolean;
      Checkbox?: React.ReactNode;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  Checkbox: typeof Checkbox;
};
export const Tooltip: {
  (
    props: {
      text?: string;
      children?: React.ReactNode | React.ReactNodeArray;
      gravity?: "left" | "top" | "right" | "bottom";
      delayMs?: number;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
};
