// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useRef } from "react";
import {
  OverlayContainer,
  useOverlayTrigger,
  useOverlayPosition,
  useOverlay,
  useModal,
  useDialog,
  mergeProps,
  FocusScope,
} from "@visly/core";
import { combineRef, renderChildren } from "./_internal_utils";
import { usePrimitive } from "./_internal_usePrimitive";
export let Alignment;

(function (Alignment) {
  Alignment[(Alignment["Start"] = 0)] = "Start";
  Alignment[(Alignment["Center"] = 1)] = "Center";
  Alignment[(Alignment["End"] = 2)] = "End";
})(Alignment || (Alignment = {}));

export const DefaultPopoverPositions = {
  under: {
    placement: "bottom start",
    offset: 0,
    crossOffset: 0,
  },
};

const PopoverInner = ({
  onClose,
  isOpen,
  innerRef,
  triggerProps,
  positionProps,
  children,
  autoFocusFirst,
  containFocus,
}) => {
  const { overlayProps } = useOverlay(
    {
      onClose,
      isOpen,
      isDismissable: true,
      shouldCloseOnBlur: false,
    },
    innerRef
  );
  useModal();
  const { dialogProps } = useDialog({}, innerRef);
  return (
    <FocusScope contain={containFocus} autoFocus={autoFocusFirst}>
      <div
        {...mergeProps(overlayProps, dialogProps, positionProps, triggerProps, {
          className: "__visly_reset",
        })}
        ref={innerRef}
      >
        {children}
      </div>
    </FocusScope>
  );
};

export function Popover(props) {
  const {
    triggerRef,
    placement = "top",
    offset = 0,
    crossOffset = 0,
    isOpen,
    onShouldClose,
    children,
    autoFocusFirst = false,
    containFocus = false,
    type = "dialog",
    scrollRef,
  } = props;
  const ref = useRef(null);
  const state = {
    isOpen,
    open: () => {},
    close: onShouldClose,
    toggle: () => {},
  };
  const overlayRef = React.useRef();
  const { overlayProps: triggerProps } = useOverlayTrigger(
    {
      type,
    },
    state,
    triggerRef
  );
  const { overlayProps: positionProps } = useOverlayPosition({
    targetRef: triggerRef,
    overlayRef,
    placement,
    offset,
    crossOffset,
    isOpen: state.isOpen,
    shouldFlip: true,
    scrollRef,
  });
  return (
    state.isOpen && (
      <OverlayContainer>
        <PopoverInner
          positionProps={positionProps}
          triggerProps={triggerProps}
          innerRef={overlayRef}
          vislyRef={ref}
          isOpen={state.isOpen}
          onClose={state.close}
          autoFocusFirst={autoFocusFirst}
          containFocus={containFocus}
        >
          {children}
        </PopoverInner>
      </OverlayContainer>
    )
  );
}
export function PopoverRoot(props) {
  const ref = useRef(null);
  const { testId, vislyProps, style, values } = usePrimitive({
    ref,
    props,
  });
  const Content = (
    <div
      ref={combineRef(props.measureRef, ref)}
      data-testid={testId}
      {...vislyProps}
      style={style}
    >
      {renderChildren(props.children, values)}
    </div>
  );

  if (props.renderInline) {
    return <>{Content}</>;
  }

  return <Popover {...props}>{Content}</Popover>;
}
