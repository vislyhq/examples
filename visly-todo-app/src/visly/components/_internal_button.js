// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useRef, useEffect, useState } from "react";
import { mergeProps, useButton } from "@visly/core";
import { combineRef, renderChildren } from "./_internal_utils";
import { usePrimitive } from "./_internal_usePrimitive";
import { injectSpacing } from "./_internal_component_utils";
export function ButtonRoot(_props) {
  const ref = useRef();
  const [isDisabled, setIsDisabled] = useState(false);
  const props = mergeProps(
    { ..._props, onClick: undefined },
    {
      onPress: _props.onClick,
    }
  );
  const { isPressed, buttonProps } = useButton({ ...props, isDisabled }, ref);
  const {
    style,
    testId,
    innerRef,
    values,
    vislyProps,
    isDisabled: disabled,
  } = usePrimitive({
    ref,
    props,
    isPressed,
  });
  useEffect(() => {
    setIsDisabled(disabled);
  }, [disabled]);
  const children = injectSpacing(
    props.addSpacing,
    renderChildren(props.children, values)
  );
  return (
    <button
      {...mergeProps(vislyProps, buttonProps)}
      ref={combineRef(props.measureRef, combineRef(innerRef, ref))}
      data-testid={testId}
      style={{
        cursor: "default",
        ...style,
      }}
    >
      {children}
    </button>
  );
}
