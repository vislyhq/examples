// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, {
  useState,
  useCallback,
  createContext,
  useContext,
  useEffect,
} from "react";
import { Item } from "@react-stately/collections";
import { exists, noop, renderChildren } from "./_internal_utils";
const CollectionContext = createContext({
  registerItem: noop,
  isProxy: false,
});

function CollectionRootProxy(props) {
  return (
    <div
      style={{
        display: "none",
      }}
    >
      <ItemContext.Provider
        value={{
          isSelected: false,
          isFocused: false,
          key: null,
        }}
      >
        {renderChildren(props.children, {})}
      </ItemContext.Provider>
    </div>
  );
}

export function CollectionItemProxy(props) {
  const { registerItem, unregisterItem } = useContext(CollectionContext);
  useEffect(() => {
    registerItem({
      key: props.value,
      props,
    });
    return () => unregisterItem(props.value);
  }, []);
  return null;
}
export function CollectionRoot(props) {
  const [items, setItems] = useState({});
  const { ParentCtor, ItemCtor } = props;
  const registerItem = useCallback(
    (item) => {
      setItems((prev) =>
        exists(prev[item.key]) ? prev : { ...prev, [item.key]: item }
      );
    },
    [setItems]
  );
  const unregisterItem = useCallback(
    (keyToDelete) => {
      setItems((prev) => {
        return Object.keys(prev)
          .filter((key) => key !== keyToDelete)
          .reduce((obj, key) => {
            return { ...obj, [key]: prev[key] };
          }, {});
      });
    },
    [setItems]
  );
  return (
    <>
      <CollectionContext.Provider
        value={{
          registerItem,
          unregisterItem,
          isProxy: true,
        }}
      >
        <CollectionRootProxy {...props} />
      </CollectionContext.Provider>
      <CollectionContext.Provider
        value={{
          isProxy: false,
        }}
      >
        <ParentCtor
          {...props}
          items={Object.values(items).map((item) => (
            <Item textValue={item.key} key={item.key}>
              <ItemCtor {...item.props} />
            </Item>
          ))}
        />
      </CollectionContext.Provider>
    </>
  );
}
export function proxy(ProxyElement, Element) {
  return (props) => {
    const { isProxy } = useContext(CollectionContext);
    return isProxy ? <ProxyElement {...props} /> : <Element {...props} />;
  };
}
export const ItemContext = createContext(null);
